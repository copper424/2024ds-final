// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: pkg/my_filesystem.proto

package my_rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NameNodeService_GetFileMetadata_FullMethodName  = "/my_rpc.NameNodeService/GetFileMetadata"
	NameNodeService_LockFile_FullMethodName         = "/my_rpc.NameNodeService/LockFile"
	NameNodeService_UnlockFile_FullMethodName       = "/my_rpc.NameNodeService/UnlockFile"
	NameNodeService_GetFileLocations_FullMethodName = "/my_rpc.NameNodeService/GetFileLocations"
	NameNodeService_RegisterDataNode_FullMethodName = "/my_rpc.NameNodeService/RegisterDataNode"
	NameNodeService_ReportFileStatus_FullMethodName = "/my_rpc.NameNodeService/ReportFileStatus"
	NameNodeService_CreateFile_FullMethodName       = "/my_rpc.NameNodeService/CreateFile"
	NameNodeService_MoveFile_FullMethodName         = "/my_rpc.NameNodeService/MoveFile"
	NameNodeService_DeleteFile_FullMethodName       = "/my_rpc.NameNodeService/DeleteFile"
	NameNodeService_ListDirectory_FullMethodName    = "/my_rpc.NameNodeService/ListDirectory"
	NameNodeService_MakeDirectory_FullMethodName    = "/my_rpc.NameNodeService/MakeDirectory"
	NameNodeService_RemoveDirectory_FullMethodName  = "/my_rpc.NameNodeService/RemoveDirectory"
	NameNodeService_SendHeartbeat_FullMethodName    = "/my_rpc.NameNodeService/SendHeartbeat"
)

// NameNodeServiceClient is the client API for NameNodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// NameNode service definition
type NameNodeServiceClient interface {
	// Metadata operations
	GetFileMetadata(ctx context.Context, in *GetFileMetadataRequest, opts ...grpc.CallOption) (*GetFileMetadataResponse, error)
	LockFile(ctx context.Context, in *LockFileRequest, opts ...grpc.CallOption) (*LockFileResponse, error)
	UnlockFile(ctx context.Context, in *UnlockFileRequest, opts ...grpc.CallOption) (*UnlockFileResponse, error)
	// File location operations
	GetFileLocations(ctx context.Context, in *GetFileMetadataRequest, opts ...grpc.CallOption) (*GetFileMetadataResponse, error)
	// Coordination operations
	RegisterDataNode(ctx context.Context, in *DatanodeLocation, opts ...grpc.CallOption) (*RegisterResponse, error)
	ReportFileStatus(ctx context.Context, in *FileMetadata, opts ...grpc.CallOption) (*StatusResponse, error)
	// File operations
	CreateFile(ctx context.Context, in *CreateFileRequest, opts ...grpc.CallOption) (*CreateFileResponse, error)
	MoveFile(ctx context.Context, in *ReadFileRequest, opts ...grpc.CallOption) (*ReadFileResponse, error)
	DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error)
	// Directory operations
	ListDirectory(ctx context.Context, in *ListDirectoryRequest, opts ...grpc.CallOption) (*ListDirectoryResponse, error)
	MakeDirectory(ctx context.Context, in *ListDirectoryRequest, opts ...grpc.CallOption) (*ListDirectoryResponse, error)
	RemoveDirectory(ctx context.Context, in *ListDirectoryRequest, opts ...grpc.CallOption) (*ListDirectoryResponse, error)
	// Heartbeat operation
	SendHeartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
}

type nameNodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNameNodeServiceClient(cc grpc.ClientConnInterface) NameNodeServiceClient {
	return &nameNodeServiceClient{cc}
}

func (c *nameNodeServiceClient) GetFileMetadata(ctx context.Context, in *GetFileMetadataRequest, opts ...grpc.CallOption) (*GetFileMetadataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFileMetadataResponse)
	err := c.cc.Invoke(ctx, NameNodeService_GetFileMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameNodeServiceClient) LockFile(ctx context.Context, in *LockFileRequest, opts ...grpc.CallOption) (*LockFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LockFileResponse)
	err := c.cc.Invoke(ctx, NameNodeService_LockFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameNodeServiceClient) UnlockFile(ctx context.Context, in *UnlockFileRequest, opts ...grpc.CallOption) (*UnlockFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnlockFileResponse)
	err := c.cc.Invoke(ctx, NameNodeService_UnlockFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameNodeServiceClient) GetFileLocations(ctx context.Context, in *GetFileMetadataRequest, opts ...grpc.CallOption) (*GetFileMetadataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFileMetadataResponse)
	err := c.cc.Invoke(ctx, NameNodeService_GetFileLocations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameNodeServiceClient) RegisterDataNode(ctx context.Context, in *DatanodeLocation, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, NameNodeService_RegisterDataNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameNodeServiceClient) ReportFileStatus(ctx context.Context, in *FileMetadata, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, NameNodeService_ReportFileStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameNodeServiceClient) CreateFile(ctx context.Context, in *CreateFileRequest, opts ...grpc.CallOption) (*CreateFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFileResponse)
	err := c.cc.Invoke(ctx, NameNodeService_CreateFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameNodeServiceClient) MoveFile(ctx context.Context, in *ReadFileRequest, opts ...grpc.CallOption) (*ReadFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadFileResponse)
	err := c.cc.Invoke(ctx, NameNodeService_MoveFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameNodeServiceClient) DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFileResponse)
	err := c.cc.Invoke(ctx, NameNodeService_DeleteFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameNodeServiceClient) ListDirectory(ctx context.Context, in *ListDirectoryRequest, opts ...grpc.CallOption) (*ListDirectoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDirectoryResponse)
	err := c.cc.Invoke(ctx, NameNodeService_ListDirectory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameNodeServiceClient) MakeDirectory(ctx context.Context, in *ListDirectoryRequest, opts ...grpc.CallOption) (*ListDirectoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDirectoryResponse)
	err := c.cc.Invoke(ctx, NameNodeService_MakeDirectory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameNodeServiceClient) RemoveDirectory(ctx context.Context, in *ListDirectoryRequest, opts ...grpc.CallOption) (*ListDirectoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDirectoryResponse)
	err := c.cc.Invoke(ctx, NameNodeService_RemoveDirectory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameNodeServiceClient) SendHeartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HeartbeatResponse)
	err := c.cc.Invoke(ctx, NameNodeService_SendHeartbeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NameNodeServiceServer is the server API for NameNodeService service.
// All implementations must embed UnimplementedNameNodeServiceServer
// for forward compatibility.
//
// NameNode service definition
type NameNodeServiceServer interface {
	// Metadata operations
	GetFileMetadata(context.Context, *GetFileMetadataRequest) (*GetFileMetadataResponse, error)
	LockFile(context.Context, *LockFileRequest) (*LockFileResponse, error)
	UnlockFile(context.Context, *UnlockFileRequest) (*UnlockFileResponse, error)
	// File location operations
	GetFileLocations(context.Context, *GetFileMetadataRequest) (*GetFileMetadataResponse, error)
	// Coordination operations
	RegisterDataNode(context.Context, *DatanodeLocation) (*RegisterResponse, error)
	ReportFileStatus(context.Context, *FileMetadata) (*StatusResponse, error)
	// File operations
	CreateFile(context.Context, *CreateFileRequest) (*CreateFileResponse, error)
	MoveFile(context.Context, *ReadFileRequest) (*ReadFileResponse, error)
	DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error)
	// Directory operations
	ListDirectory(context.Context, *ListDirectoryRequest) (*ListDirectoryResponse, error)
	MakeDirectory(context.Context, *ListDirectoryRequest) (*ListDirectoryResponse, error)
	RemoveDirectory(context.Context, *ListDirectoryRequest) (*ListDirectoryResponse, error)
	// Heartbeat operation
	SendHeartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
	mustEmbedUnimplementedNameNodeServiceServer()
}

// UnimplementedNameNodeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNameNodeServiceServer struct{}

func (UnimplementedNameNodeServiceServer) GetFileMetadata(context.Context, *GetFileMetadataRequest) (*GetFileMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileMetadata not implemented")
}
func (UnimplementedNameNodeServiceServer) LockFile(context.Context, *LockFileRequest) (*LockFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockFile not implemented")
}
func (UnimplementedNameNodeServiceServer) UnlockFile(context.Context, *UnlockFileRequest) (*UnlockFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockFile not implemented")
}
func (UnimplementedNameNodeServiceServer) GetFileLocations(context.Context, *GetFileMetadataRequest) (*GetFileMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileLocations not implemented")
}
func (UnimplementedNameNodeServiceServer) RegisterDataNode(context.Context, *DatanodeLocation) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterDataNode not implemented")
}
func (UnimplementedNameNodeServiceServer) ReportFileStatus(context.Context, *FileMetadata) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportFileStatus not implemented")
}
func (UnimplementedNameNodeServiceServer) CreateFile(context.Context, *CreateFileRequest) (*CreateFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFile not implemented")
}
func (UnimplementedNameNodeServiceServer) MoveFile(context.Context, *ReadFileRequest) (*ReadFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveFile not implemented")
}
func (UnimplementedNameNodeServiceServer) DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedNameNodeServiceServer) ListDirectory(context.Context, *ListDirectoryRequest) (*ListDirectoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDirectory not implemented")
}
func (UnimplementedNameNodeServiceServer) MakeDirectory(context.Context, *ListDirectoryRequest) (*ListDirectoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeDirectory not implemented")
}
func (UnimplementedNameNodeServiceServer) RemoveDirectory(context.Context, *ListDirectoryRequest) (*ListDirectoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDirectory not implemented")
}
func (UnimplementedNameNodeServiceServer) SendHeartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendHeartbeat not implemented")
}
func (UnimplementedNameNodeServiceServer) mustEmbedUnimplementedNameNodeServiceServer() {}
func (UnimplementedNameNodeServiceServer) testEmbeddedByValue()                         {}

// UnsafeNameNodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NameNodeServiceServer will
// result in compilation errors.
type UnsafeNameNodeServiceServer interface {
	mustEmbedUnimplementedNameNodeServiceServer()
}

func RegisterNameNodeServiceServer(s grpc.ServiceRegistrar, srv NameNodeServiceServer) {
	// If the following call pancis, it indicates UnimplementedNameNodeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NameNodeService_ServiceDesc, srv)
}

func _NameNodeService_GetFileMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameNodeServiceServer).GetFileMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NameNodeService_GetFileMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameNodeServiceServer).GetFileMetadata(ctx, req.(*GetFileMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameNodeService_LockFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameNodeServiceServer).LockFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NameNodeService_LockFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameNodeServiceServer).LockFile(ctx, req.(*LockFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameNodeService_UnlockFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameNodeServiceServer).UnlockFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NameNodeService_UnlockFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameNodeServiceServer).UnlockFile(ctx, req.(*UnlockFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameNodeService_GetFileLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameNodeServiceServer).GetFileLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NameNodeService_GetFileLocations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameNodeServiceServer).GetFileLocations(ctx, req.(*GetFileMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameNodeService_RegisterDataNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatanodeLocation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameNodeServiceServer).RegisterDataNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NameNodeService_RegisterDataNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameNodeServiceServer).RegisterDataNode(ctx, req.(*DatanodeLocation))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameNodeService_ReportFileStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileMetadata)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameNodeServiceServer).ReportFileStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NameNodeService_ReportFileStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameNodeServiceServer).ReportFileStatus(ctx, req.(*FileMetadata))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameNodeService_CreateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameNodeServiceServer).CreateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NameNodeService_CreateFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameNodeServiceServer).CreateFile(ctx, req.(*CreateFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameNodeService_MoveFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameNodeServiceServer).MoveFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NameNodeService_MoveFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameNodeServiceServer).MoveFile(ctx, req.(*ReadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameNodeService_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameNodeServiceServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NameNodeService_DeleteFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameNodeServiceServer).DeleteFile(ctx, req.(*DeleteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameNodeService_ListDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDirectoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameNodeServiceServer).ListDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NameNodeService_ListDirectory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameNodeServiceServer).ListDirectory(ctx, req.(*ListDirectoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameNodeService_MakeDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDirectoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameNodeServiceServer).MakeDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NameNodeService_MakeDirectory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameNodeServiceServer).MakeDirectory(ctx, req.(*ListDirectoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameNodeService_RemoveDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDirectoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameNodeServiceServer).RemoveDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NameNodeService_RemoveDirectory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameNodeServiceServer).RemoveDirectory(ctx, req.(*ListDirectoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameNodeService_SendHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameNodeServiceServer).SendHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NameNodeService_SendHeartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameNodeServiceServer).SendHeartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NameNodeService_ServiceDesc is the grpc.ServiceDesc for NameNodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NameNodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "my_rpc.NameNodeService",
	HandlerType: (*NameNodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFileMetadata",
			Handler:    _NameNodeService_GetFileMetadata_Handler,
		},
		{
			MethodName: "LockFile",
			Handler:    _NameNodeService_LockFile_Handler,
		},
		{
			MethodName: "UnlockFile",
			Handler:    _NameNodeService_UnlockFile_Handler,
		},
		{
			MethodName: "GetFileLocations",
			Handler:    _NameNodeService_GetFileLocations_Handler,
		},
		{
			MethodName: "RegisterDataNode",
			Handler:    _NameNodeService_RegisterDataNode_Handler,
		},
		{
			MethodName: "ReportFileStatus",
			Handler:    _NameNodeService_ReportFileStatus_Handler,
		},
		{
			MethodName: "CreateFile",
			Handler:    _NameNodeService_CreateFile_Handler,
		},
		{
			MethodName: "MoveFile",
			Handler:    _NameNodeService_MoveFile_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _NameNodeService_DeleteFile_Handler,
		},
		{
			MethodName: "ListDirectory",
			Handler:    _NameNodeService_ListDirectory_Handler,
		},
		{
			MethodName: "MakeDirectory",
			Handler:    _NameNodeService_MakeDirectory_Handler,
		},
		{
			MethodName: "RemoveDirectory",
			Handler:    _NameNodeService_RemoveDirectory_Handler,
		},
		{
			MethodName: "SendHeartbeat",
			Handler:    _NameNodeService_SendHeartbeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/my_filesystem.proto",
}

const (
	DataNodeService_StoreFile_FullMethodName      = "/my_rpc.DataNodeService/StoreFile"
	DataNodeService_RetrieveFile_FullMethodName   = "/my_rpc.DataNodeService/RetrieveFile"
	DataNodeService_DeleteFile_FullMethodName     = "/my_rpc.DataNodeService/DeleteFile"
	DataNodeService_PrepareReplica_FullMethodName = "/my_rpc.DataNodeService/PrepareReplica"
	DataNodeService_CommitReplica_FullMethodName  = "/my_rpc.DataNodeService/CommitReplica"
	DataNodeService_AbortReplica_FullMethodName   = "/my_rpc.DataNodeService/AbortReplica"
)

// DataNodeServiceClient is the client API for DataNodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// DataNode service definition
type DataNodeServiceClient interface {
	// Existing methods
	StoreFile(ctx context.Context, in *WriteFileRequest, opts ...grpc.CallOption) (*WriteFileResponse, error)
	RetrieveFile(ctx context.Context, in *ReadFileRequest, opts ...grpc.CallOption) (*ReadFileResponse, error)
	DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error)
	// New 2PC methods
	PrepareReplica(ctx context.Context, in *PrepareReplicaRequest, opts ...grpc.CallOption) (*PrepareReplicaResponse, error)
	CommitReplica(ctx context.Context, in *CommitReplicaRequest, opts ...grpc.CallOption) (*CommitReplicaResponse, error)
	AbortReplica(ctx context.Context, in *AbortReplicaRequest, opts ...grpc.CallOption) (*AbortReplicaResponse, error)
}

type dataNodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataNodeServiceClient(cc grpc.ClientConnInterface) DataNodeServiceClient {
	return &dataNodeServiceClient{cc}
}

func (c *dataNodeServiceClient) StoreFile(ctx context.Context, in *WriteFileRequest, opts ...grpc.CallOption) (*WriteFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WriteFileResponse)
	err := c.cc.Invoke(ctx, DataNodeService_StoreFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataNodeServiceClient) RetrieveFile(ctx context.Context, in *ReadFileRequest, opts ...grpc.CallOption) (*ReadFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadFileResponse)
	err := c.cc.Invoke(ctx, DataNodeService_RetrieveFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataNodeServiceClient) DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFileResponse)
	err := c.cc.Invoke(ctx, DataNodeService_DeleteFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataNodeServiceClient) PrepareReplica(ctx context.Context, in *PrepareReplicaRequest, opts ...grpc.CallOption) (*PrepareReplicaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PrepareReplicaResponse)
	err := c.cc.Invoke(ctx, DataNodeService_PrepareReplica_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataNodeServiceClient) CommitReplica(ctx context.Context, in *CommitReplicaRequest, opts ...grpc.CallOption) (*CommitReplicaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommitReplicaResponse)
	err := c.cc.Invoke(ctx, DataNodeService_CommitReplica_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataNodeServiceClient) AbortReplica(ctx context.Context, in *AbortReplicaRequest, opts ...grpc.CallOption) (*AbortReplicaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AbortReplicaResponse)
	err := c.cc.Invoke(ctx, DataNodeService_AbortReplica_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataNodeServiceServer is the server API for DataNodeService service.
// All implementations must embed UnimplementedDataNodeServiceServer
// for forward compatibility.
//
// DataNode service definition
type DataNodeServiceServer interface {
	// Existing methods
	StoreFile(context.Context, *WriteFileRequest) (*WriteFileResponse, error)
	RetrieveFile(context.Context, *ReadFileRequest) (*ReadFileResponse, error)
	DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error)
	// New 2PC methods
	PrepareReplica(context.Context, *PrepareReplicaRequest) (*PrepareReplicaResponse, error)
	CommitReplica(context.Context, *CommitReplicaRequest) (*CommitReplicaResponse, error)
	AbortReplica(context.Context, *AbortReplicaRequest) (*AbortReplicaResponse, error)
	mustEmbedUnimplementedDataNodeServiceServer()
}

// UnimplementedDataNodeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDataNodeServiceServer struct{}

func (UnimplementedDataNodeServiceServer) StoreFile(context.Context, *WriteFileRequest) (*WriteFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreFile not implemented")
}
func (UnimplementedDataNodeServiceServer) RetrieveFile(context.Context, *ReadFileRequest) (*ReadFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveFile not implemented")
}
func (UnimplementedDataNodeServiceServer) DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedDataNodeServiceServer) PrepareReplica(context.Context, *PrepareReplicaRequest) (*PrepareReplicaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareReplica not implemented")
}
func (UnimplementedDataNodeServiceServer) CommitReplica(context.Context, *CommitReplicaRequest) (*CommitReplicaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitReplica not implemented")
}
func (UnimplementedDataNodeServiceServer) AbortReplica(context.Context, *AbortReplicaRequest) (*AbortReplicaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AbortReplica not implemented")
}
func (UnimplementedDataNodeServiceServer) mustEmbedUnimplementedDataNodeServiceServer() {}
func (UnimplementedDataNodeServiceServer) testEmbeddedByValue()                         {}

// UnsafeDataNodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataNodeServiceServer will
// result in compilation errors.
type UnsafeDataNodeServiceServer interface {
	mustEmbedUnimplementedDataNodeServiceServer()
}

func RegisterDataNodeServiceServer(s grpc.ServiceRegistrar, srv DataNodeServiceServer) {
	// If the following call pancis, it indicates UnimplementedDataNodeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DataNodeService_ServiceDesc, srv)
}

func _DataNodeService_StoreFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServiceServer).StoreFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataNodeService_StoreFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServiceServer).StoreFile(ctx, req.(*WriteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataNodeService_RetrieveFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServiceServer).RetrieveFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataNodeService_RetrieveFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServiceServer).RetrieveFile(ctx, req.(*ReadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataNodeService_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServiceServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataNodeService_DeleteFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServiceServer).DeleteFile(ctx, req.(*DeleteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataNodeService_PrepareReplica_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareReplicaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServiceServer).PrepareReplica(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataNodeService_PrepareReplica_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServiceServer).PrepareReplica(ctx, req.(*PrepareReplicaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataNodeService_CommitReplica_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitReplicaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServiceServer).CommitReplica(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataNodeService_CommitReplica_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServiceServer).CommitReplica(ctx, req.(*CommitReplicaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataNodeService_AbortReplica_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbortReplicaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServiceServer).AbortReplica(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataNodeService_AbortReplica_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServiceServer).AbortReplica(ctx, req.(*AbortReplicaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataNodeService_ServiceDesc is the grpc.ServiceDesc for DataNodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataNodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "my_rpc.DataNodeService",
	HandlerType: (*DataNodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StoreFile",
			Handler:    _DataNodeService_StoreFile_Handler,
		},
		{
			MethodName: "RetrieveFile",
			Handler:    _DataNodeService_RetrieveFile_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _DataNodeService_DeleteFile_Handler,
		},
		{
			MethodName: "PrepareReplica",
			Handler:    _DataNodeService_PrepareReplica_Handler,
		},
		{
			MethodName: "CommitReplica",
			Handler:    _DataNodeService_CommitReplica_Handler,
		},
		{
			MethodName: "AbortReplica",
			Handler:    _DataNodeService_AbortReplica_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/my_filesystem.proto",
}

const (
	SecondaryNameNodeService_ReceiveMetadata_FullMethodName = "/my_rpc.SecondaryNameNodeService/ReceiveMetadata"
	SecondaryNameNodeService_RestoreMetadata_FullMethodName = "/my_rpc.SecondaryNameNodeService/RestoreMetadata"
)

// SecondaryNameNodeServiceClient is the client API for SecondaryNameNodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SecondaryNameNode service definition
type SecondaryNameNodeServiceClient interface {
	ReceiveMetadata(ctx context.Context, in *MetadataPayload, opts ...grpc.CallOption) (*StatusResponse, error)
	RestoreMetadata(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MetadataPayload, error)
}

type secondaryNameNodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSecondaryNameNodeServiceClient(cc grpc.ClientConnInterface) SecondaryNameNodeServiceClient {
	return &secondaryNameNodeServiceClient{cc}
}

func (c *secondaryNameNodeServiceClient) ReceiveMetadata(ctx context.Context, in *MetadataPayload, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, SecondaryNameNodeService_ReceiveMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secondaryNameNodeServiceClient) RestoreMetadata(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MetadataPayload, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MetadataPayload)
	err := c.cc.Invoke(ctx, SecondaryNameNodeService_RestoreMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecondaryNameNodeServiceServer is the server API for SecondaryNameNodeService service.
// All implementations must embed UnimplementedSecondaryNameNodeServiceServer
// for forward compatibility.
//
// SecondaryNameNode service definition
type SecondaryNameNodeServiceServer interface {
	ReceiveMetadata(context.Context, *MetadataPayload) (*StatusResponse, error)
	RestoreMetadata(context.Context, *Empty) (*MetadataPayload, error)
	mustEmbedUnimplementedSecondaryNameNodeServiceServer()
}

// UnimplementedSecondaryNameNodeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSecondaryNameNodeServiceServer struct{}

func (UnimplementedSecondaryNameNodeServiceServer) ReceiveMetadata(context.Context, *MetadataPayload) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveMetadata not implemented")
}
func (UnimplementedSecondaryNameNodeServiceServer) RestoreMetadata(context.Context, *Empty) (*MetadataPayload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreMetadata not implemented")
}
func (UnimplementedSecondaryNameNodeServiceServer) mustEmbedUnimplementedSecondaryNameNodeServiceServer() {
}
func (UnimplementedSecondaryNameNodeServiceServer) testEmbeddedByValue() {}

// UnsafeSecondaryNameNodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecondaryNameNodeServiceServer will
// result in compilation errors.
type UnsafeSecondaryNameNodeServiceServer interface {
	mustEmbedUnimplementedSecondaryNameNodeServiceServer()
}

func RegisterSecondaryNameNodeServiceServer(s grpc.ServiceRegistrar, srv SecondaryNameNodeServiceServer) {
	// If the following call pancis, it indicates UnimplementedSecondaryNameNodeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SecondaryNameNodeService_ServiceDesc, srv)
}

func _SecondaryNameNodeService_ReceiveMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetadataPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecondaryNameNodeServiceServer).ReceiveMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecondaryNameNodeService_ReceiveMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecondaryNameNodeServiceServer).ReceiveMetadata(ctx, req.(*MetadataPayload))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecondaryNameNodeService_RestoreMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecondaryNameNodeServiceServer).RestoreMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecondaryNameNodeService_RestoreMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecondaryNameNodeServiceServer).RestoreMetadata(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// SecondaryNameNodeService_ServiceDesc is the grpc.ServiceDesc for SecondaryNameNodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SecondaryNameNodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "my_rpc.SecondaryNameNodeService",
	HandlerType: (*SecondaryNameNodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReceiveMetadata",
			Handler:    _SecondaryNameNodeService_ReceiveMetadata_Handler,
		},
		{
			MethodName: "RestoreMetadata",
			Handler:    _SecondaryNameNodeService_RestoreMetadata_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/my_filesystem.proto",
}
